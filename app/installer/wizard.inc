<?php

/* -------------------- wizard class ----------------*/



/**

* This is the installer Wizard class

*

*/

define('INSTALL_DIR', dirname(__FILE__));

define('STEP_DIR', dirname(__FILE__).'/steps');



require_once dirname(__FILE__).'/template.inc';

require_once STEP_DIR.'/complete.inc';



/**

* Wizard

*

*

* The controller for a wizard application (esp installer type apps)

*

*

* @author Prince Mbekwa based on the methods of mnyeholt

* @version $version$ - 1.0

* @package 5ive

* @subpackage installer

*/

class Wizard

{

	/**

	* The steps in this wizard

	* @var array

	*/

	var $steps = Array();



	/**

	* The steps that have been visited in this array

	* @var array

	*/

	var $completed_steps = Array();



	/**

	* Any errors generated by the wizard should be stored here.

	* @var array

	*/

	var $errors = Array();



	/**

	* description

	* @var object

	*/

	var $active_step = null;



	/**

	* The current step index being processed

	* @var type

	*/

	var $step_number = 0;



	/**

	* The template object we're going to use for output

	* @var object

	*/

	var $template = null;



	/**

	* Did processing of this step succeed?

	* @var boolean

	*/

	var $step_success = true;



	/**

	* Is installation complete?

	* @var boolean

	*/

	var $complete = false;


	public function __construct()
	{
		 if (isset($_REQUEST[session_name()])) {
            $this->_startSession();
        }

	}


	/**

	* Create the template object we're going to use

	*

	* @return void

	* @access public

	*/

	public function Wizard()

	{

		$this->template = new Template(dirname(__FILE__).'/templates/wizard.tpl');

	}//end Wizard()





	/**

	* Run the wizard.

	*

	* @return void

	* @access public

	*/

	public function run()

	{

		$this->_startSession();



		// load the completed steps

		$this->completed_steps = isset($_SESSION['completed_steps'])?$_SESSION['completed_steps']:array();





		// find out what step the wizard should start on

		$this->_findStepNumber();



		// Try loading the current step. If not, exit

		if (!$this->_loadStep()) {

			$this->errors[] = 'Could not load step number '.$this->step_number;

		}



		// Process stuff that came through on the POST vars. If there was no POST,

		// just process the current step and paint it.

		$this->_processPost();

		$this->_paintStep();

		$_SESSION['current_step'] = $this->step_number;

		$_SESSION['completed_steps'] = $this->completed_steps;





	}//end run()





	/**

	* Start the session

	*

	* @param string $name The name of the session to create

	* @return void

	* @access protected

	*/

	protected function _startSession($name=null)

	{

		if (is_string($name)) {

			session_name($name);

		}



		session_start();



	}//end _startSession()





	/**

	* Kill the current session.

	*

	* @return void

	* @access public

	*/

	protected function _killSession()

	{

		if (session_id()) {

			session_destroy();

		}

		$_SESSION = Array();

	}//end _killSession()





	/**

	* Kill the current session.

	*

	* @return void

	* @access public

	*/

	public function killSession()

	{

		$this->_killSession();



	}//end killSession()





	/**

	* Find what step should be processed

	*

	* This method should go through all steps and call the step::isProcessed method. This method

	* returns true if the step has already been processed, so that the most recently processed

	* step can be loaded. This handles instances of incomplete installations.

	*

	* @return void

	* @access protected

	*/

	protected function _findStepNumber()

	{

              // Prevent re-install 
               $path=substr(str_replace('\\','/',$_SERVER['SCRIPT_FILENAME']),0,-20)."/config/";
               if (!isset($_SESSION['current_step']) && file_exists($path."installdone.txt") && file_exists($path."config.xml")&&file_exists($path."dbdetails_inc.php")){
                   $this->step_number=1;
                   $this->errors[]= "The installation has been done already.<br />\nClick <a href='../index.php?module=modulecatalogue&action=firsttimeregistration'>here</a> to enter the site.<br />\n";               
                   return;

               }


        //Create the installdone.txt file if this is the final step
        // We check if step 8 has been done - have to change this if we change the number of steps.
        if (isset($_SESSION['completed_steps'])){
            $steps=$_SESSION['completed_steps'];
            if (is_array($steps) && (in_array(7,$steps)) ){
                $path = $_SESSION['sys_root'].'/config/';
                touch($path . 'installdone.txt');
            }
        }

		// if there is a current_step set in the post data, use that by preference. This

		// allows people to use the back browser a bit better than before, as the browser

		// will resend POST data from back then.

		if (isset($_REQUEST['current_step'])) {

			$this->step_number = (int) $_REQUEST['current_step'];

			return;

		}



		// if there is a current_step set in the session, use that as the current step number

		if (isset($_SESSION['current_step'])) {

			$this->step_number = (int) $_SESSION['current_step'];

			//echo 'MARCUS - got step from session '.$_SESSION['session_type'].' of '.$_SESSION['current_step'].'<br />';

			return;

		}

 
		// otherwise, iterate through all the steps to find which one is the last incomplete step

		// This will only ever be called at the start of a session

		for ($i=0; $i<count($this->steps); $i++) {

			$this->step_number = $i;

			$this->_loadStep();



			if (!$this->active_step->isProcessed()) {

				// found the latest step, break out of the loop.

				break;

			}

		}



		// otherwise just return 0

		return 0;



	}//end _findStepNumber()


    function loadXMLtoSession()
    {
    
                   // Load up the data from the config file into the session
                   $data=simplexml_load_file($path."config.xml");
                   if ($data!=FALSE){
                       foreach ($data as $dkey=>$dvalue){
                           $_SESSION[$dkey]=(string) $dvalue;
                       }
                        $values=array (
                            'KEWL_SITEROOT_PATH'=>'sys_root',
                            'KEWL_SITE_ROOT'=>'site_url', 
                            'KEWL_INSTITUTION_SHORTNAME'=>'sys_owner', 
                            'KEWL_INSTITUTION_NAME'=>'sys_owner', 
                            'KEWL_PROXY'=>'proxy', 
                            'KEWL_DEFAULT_SKIN'=>'defaultskin', 
                            'KEWL_POSTLOGIN_MODULE'=>'postLogin', 
                            'KEWL_SYSTEM_TYPE'=>'SysType', 
                            'KEWL_MODULE_PATH'=>'module_path', 
                            'MODULE_URI'=>'module_URI', 
                            'KEWL_TEMPLATE_PATH'=>'sys_root', 
                            'KEWL_CONTENT_BASEPATH'=>'contentPath', 
                            'KEWL_CONTENT_PATH'=>'relContentPath', 
                            'KEWL_SITENAME'=>'sys_name', 
                            'KEWL_SERVERNAME'=>'serverName', 
                            'KEWL_MAINSERVERNAME'=>'main_server', 
                            'KEWL_SERVERLOCATION'=>'serverLocation', 
                            'KEWL_ENABLE_LOGGING'=>'log_enable', 
                            'KEWL_SYSTEM_OWNER'=>'sys_owner', 
                            'KEWL_SITEEMAIL'=>'root_email', 
                            'KEWL_TECH_EMAIL'=>'tech_email', 
                            'KEWL_LOG_FILE'=>'log_path'
                            ); 
                       foreach ($values as $dkey=>$dvalue){
                           if (isset($_SESSION[$dkey])){
                               $_SESSION[$dvalue]=$_SESSION[$dkey];
                           }
                       }
                   }
                   return;
    }


	/**

	* Get the step number of a named step

	*

	* @param string $step_name

	* @return void

	* @access protected

	*/

	protected function _getStepByName($step_name)

	{

		$step_name = strtolower($step_name);

		$key = array_search($step_name, $this->steps);

		return $key;

	}//end _getStepByName()





	/**

	* Load a step as the current step

	*

	* @return boolean Whether the step loaded or not.

	* @access protected

	*/

	protected function _loadStep()

	{



		$step_id = $this->step_number;



		// If the step_id is greater than the number of steps, we've reached the end,

		if (($step_id+1) >= count($this->steps)) {

			$this->complete = true;

			$this->step_number = count($this->steps)-1;

			$step_id = $this->step_number;

			//$this->active_step = new Complete();

		} else {

			$this->complete = false;

		}





		if (!isset($this->steps[$step_id])) {

			$this->errors[] = 'Could not find step class for step  id: '.$step_id.'';

			return false;

		}

		$step_class = $this->steps[$step_id];



		if (!class_exists($step_class, true)) {

			$this->__autoload((STEP_DIR.'/'.$step_class.'.inc'));

			if (!class_exists($step_class, true)) {

				$this->errors[] = 'Missing class for step '.$step_class;

				return false;

			}

		}



		$this->active_step = new $step_class();



		return true;



	}//_loadStep()


	public function __autoload($class)
	{
		include_once($class);
		$cname = basename($class);
		$cname = explode(".", $cname);
		$classes = $cname[0];
		// Check to see if the include declared the class
		if (!class_exists($classes, false)) {
			trigger_error("Unable to load class: $classes", E_USER_WARNING);
		}
	}


	/**

	* Process what was sent through the POST

	*

	* @return boolean Whether the post vars existed or not.

	* @access protected

	*/

	 protected function _processPost()

	{

		if (!isset($_POST)) {

			return false;

		}

		// check what button was pressed. The _x matches the image button,

		// as IE doesn't send the name of the button through, only where it

		// was clicked.

		if (isset($_POST['next']) || isset($_POST['next_x'])) {

			// process the current step and change to the next one if needbe

			//echo 'MARCUS - processing post[next] for '.$this->step_number.'<br />';

			$this->_processStep();

		} else if (isset($_POST['previous']) || isset($_POST['previous_x'])) {

			// rollback the last step

			$this->_rollbackStep();

		} else if (isset($_POST['skip']) || isset($_POST['skip_x'])) {

			// skip to the next step

			$this->_skipStep();

		} else if (isset($_POST['cancel']) || isset($_POST['cancel_x'])) {

			// rollback ALL previously performed steps.

			$this->_rollback();

		}



		return true;



	}//end _processPost()





	/**

	* Process the current step

	*

	* After processing the current active_step, decides whether or not to change the step to the next

	* step in the definition.

	*

	* @return void

	* @access protected

	*/

	protected function _processStep()

	{



		$this->step_success = $this->active_step->process();

		$this->errors = array_merge($this->errors, $this->active_step->errors);

		// if the current step says proceed to the next step, try and load the new step.

		if ($this->step_success) {

			$old_step = &$this->active_step;

			$old_step_number = $this->step_number;



			// if the step has set a next step, get it and use that for the next step to load

			if ($this->active_step->next_step != '') {

				$this->step_number = $this->_getStepByName($this->active_step->next_step);

			} else {

				// set the step number before trying to load it.

				$this->step_number += $this->active_step->num_steps;

			}



			// warn about not being able to load the next step, revert to current step for paint

			if ($this->_loadStep()) {

				// record that this step was successfully completed.

				//if (!in_array($old_step_number, $this->completed_steps)) {

					$this->completed_steps[] = $old_step_number;

				//}

			} else {

				//trigger_error('Could not load the next step : '.implode($this->errors, '<br />'), E_USER_ERROR);

				$this->errors[] = 'Could not load the next step ';

				$this->step_success = false;



				$this->active_step = &$old_step;

				$this->step_number = $old_step_number;

			}

		}



	}//end _processStep





	/**

	* Skip over the current step without processing it and load the next step.

	*

	* @return void

	* @access protected

	*/

	protected function _skipStep()

	{

		$old_step = &$this->active_step;

		$old_step_number = $this->step_number;



		// keep track of the step being skipped.



		$this->step_number++;



		if ($this->_loadStep()) {

			// record that this step was successfully completed.

			if (!in_array($old_step_number, $this->completed_steps)) {

				$this->completed_steps[] = $old_step_number;

			}

		} else {

			$this->errors[] = 'Could not load the next step ';

			$this->step_success = false;



			$this->active_step = &$old_step;

			$this->step_number = $old_step_number;

		}



	}//end _skipStep()





	/**

	* Rollback a step

	*

	* To rollback, the previous step must first be loaded, then its rollback method called.

	* This is so that when it then goes and gets processed again, it is as though it was

	* never processed in the first place.

	*

	* @return void

	* @access protected

	*/

	protected function _rollbackStep()

	{

		// check if this previous click was from a confirmations step by checking POST vars.

		if (!isset($_POST['confirm_step'])) {

			// need to delete the present step from the completed_steps

			$prev_step = end($this->completed_steps);

			$cur_complete_step = array_search($prev_step, $this->completed_steps);

			unset($this->completed_steps[$cur_complete_step]);

			$this->step_number = $prev_step;

		}



		$this->_loadStep();



		// only go to the previous step if rollback was successful

		if (!$this->active_step->rollback()) {

			$this->errors[] = 'Rollback of step '.$this->steps[$prev_step].' failed';

		}

	}//end _rollbackStep()





	/**

	* Rollback all steps performed so far and return to the first step

	*

	* @return void

	* @access protected

	*/

	protected function _rollback()

	{

		$this->_killSession();

		$this->step_number = 0;

		$this->_loadStep();



	}//end _rollback





	/**

	* Paint out the current step.

	*

	* Set the appropriate fields in the template file to show the step

	* @return void

	* @access protected

	*/

	function _paintStep()

	{

		// If the active step can be skipped

		$skip = !$this->active_step->isRequired();

		// Set the title of the page to that of the active step.

		$title = $this->active_step->step_title;



		$start = false;

		// if it's the start step, destroy the session

		if( $this->step_number <= 0 ) {



			$start = true;

		}



		// start buffering and paint the current step.

		ob_start();

			$this->active_step->paint();

			$step_details = ob_get_contents();

		ob_end_clean();



		// set all the template variables

		$this->template->set('can_cancel', $this->active_step->can_cancel);

		$this->template->set('title', $title);

		$this->template->set('step_details', $step_details);

		$this->template->set('enable_skip', $skip);

		$this->template->set('start', $start);

		$this->template->set('complete', $this->complete);



		// initially errors are blank

		$this->template->set('error', '');



		if (count($this->errors) > 0) {

			$errStr = implode($this->errors, '<br />');

			$this->template->set('error', $errStr);

		}



		echo $this->template->fetch();



	}//end _paintStep()





}//end class

?>