<?php

// security check - must be included in all scripts
if (!$GLOBALS['kewl_entry_point_run']) {
    die("You cannot view this page directly");
}
// end security check

/**
 * Results class controls results generated by lucene
 *
 * @author Wesley Nitsckie
 * @copyright AVOIR UWC
 * @access public
 * @package lucene
 */


//required top level files
require_once 'modules/lucene/resources/Exception.php';
require_once 'modules/lucene/resources/Search/Exception.php';
require_once 'modules/lucene/resources/Search/Lucene.php';

//lucene specific files
require_once 'modules/lucene/resources/Search/Lucene/Document.php';
require_once 'modules/lucene/resources/Search/Lucene/Exception.php';
require_once 'modules/lucene/resources/Search/Lucene/Field.php';

//storage files
require_once 'modules/lucene/resources/Search/Lucene/Storage/Directory.php';
require_once 'modules/lucene/resources/Search/Lucene/Storage/File.php';

//filesystem adaptors
require_once 'modules/lucene/resources/Search/Lucene/Storage/Directory/Filesystem.php';
require_once 'modules/lucene/resources/Search/Lucene/Storage/File/Filesystem.php';

//analysis adaptors
require_once 'modules/lucene/resources/Search/Lucene/Analysis/Analyzer.php';
require_once 'modules/lucene/resources/Search/Lucene/Analysis/Token.php';
require_once 'modules/lucene/resources/Search/Lucene/Analysis/TokenFilter.php';
require_once 'modules/lucene/resources/Search/Lucene/Analysis/Analyzer/Common.php';
require_once 'modules/lucene/resources/Search/Lucene/Analysis/Analyzer/Common/Text.php';
require_once 'modules/lucene/resources/Search/Lucene/Analysis/Analyzer/Common/Text/CaseInsensitive.php';
require_once 'modules/lucene/resources/Search/Lucene/Analysis/TokenFilter/LowerCase.php';

//index adaptors
require_once 'modules/lucene/resources/Search/Lucene/Index/FieldInfo.php';
require_once 'modules/lucene/resources/Search/Lucene/Index/SegmentInfo.php';
require_once 'modules/lucene/resources/Search/Lucene/Index/SegmentWriter.php';
require_once 'modules/lucene/resources/Search/Lucene/Index/Term.php';
require_once 'modules/lucene/resources/Search/Lucene/Index/TermInfo.php';
require_once 'modules/lucene/resources/Search/Lucene/Index/Writer.php';

//Search adaptors
require_once 'modules/lucene/resources/Search/Lucene/Search/Query.php';
require_once 'modules/lucene/resources/Search/Lucene/Search/QueryHit.php';
require_once 'modules/lucene/resources/Search/Lucene/Search/QueryParser.php';
require_once 'modules/lucene/resources/Search/Lucene/Search/QueryToken.php';
require_once 'modules/lucene/resources/Search/Lucene/Search/QueryTokenizer.php';
require_once 'modules/lucene/resources/Search/Lucene/Search/Similarity.php';
require_once 'modules/lucene/resources/Search/Lucene/Search/Weight.php';


//Search/Query adaptors
require_once 'modules/lucene/resources/Search/Lucene/Search/Query/MultiTerm.php';
require_once 'modules/lucene/resources/Search/Lucene/Search/Query/Phrase.php';
require_once 'modules/lucene/resources/Search/Lucene/Search/Query/Term.php';

//Search/Similarity adaptor
require_once 'modules/lucene/resources/Search/Lucene/Search/Similarity/Default.php';

//Search/Weight adaptors
require_once 'modules/lucene/resources/Search/Lucene/Search/Weight/MultiTerm.php';
require_once 'modules/lucene/resources/Search/Lucene/Search/Weight/Phrase.php';
require_once 'modules/lucene/resources/Search/Lucene/Search/Weight/Term.php';


class results extends object
{
	
	
	/**
	 * Configuration object
	 *
	 * @var object
	 */
	public $objConfig;
	
	
	/**
	 * Instantiated search object
	 *
	 * @var object
	 */
	public $search;


	/**
	* Constructor
	*/
	public function init()
	{
		// instantiate objects
        try{
			//the language object
        	$this->objLanguage = $this->getObject('language','language');
        	//the config object
        	$this->objConfig = $this->getObject('altconfig','config');
       	}
        //catch any exceptions that may have occured and pass them to the error handler
        catch (customException $e){
        	//output the standard error page
       		echo customException::cleanUp($e);
       		//kill the script to suppress any further errors
        	exit();
        }

	}
	
	
	/**
	* Method to show the results
	* @access public
	* @return string
	* @author Wesley Nitsckie
	* @param 
	*/
	
	public function show($query)
	{
		try{
			//$query = $this->getParam('query');
	    	$this->search = new Zend_Search_Lucene($this->objConfig->getcontentBasePath().'/chisimbaIndex');
	    	//echo "Searching " . $this->search->count() . " Documents <br><br>";
	    	//clean the query
	    	$query = trim($query);
	
	    	if (strlen($query) > 0) {
				$hits = $this->search->find($query);
					//print_r($hits);
				$numHits = count($hits);
			}
			//echo "Found $numHits Results for Query $query <br><br>";
			foreach($hits as $hit)
			{
				$str .= "Title " . $hit->title . " at URL " . "<a href=\"$hit->url\">$hit->url</a> " . "with relevance score of " . $hit->score . "<br/><br/><hr/>";
			}
			
			return $this->_displayResults($hits);

		 }
        //catch any exceptions that may have occured and pass them to the error handler
        catch (customException $e){
        	//output the standard error page
       		echo customException::cleanUp($e);
       		//kill the script to suppress any further errors
        	exit();
        }
	}
	
	
	/**
	* Method to format the display of the results
	* @param array @arrResults The result set
	* @return string the formatted results
	* @access private
	*/
	private function _displayResults($arrResults=null)
	{
		$str = '<hr />';
		$hitsPerPage = 5;
		$pagesPerSlide = ceil(count($arrResults)/5);
		
		//get the page number
		$pageno = (!$this->getParam('pageno') == '') ? $this->getParam('pageno') : 1;
		
		//setup prvious link
		if($pageno == 1)
		{
			$str .=	'<div class="pagination"><p><span><strong>Previous</strong></span>';
		} else {
			$str .=	'<div class="pagination"><p><a href="'.$this->uri(array('query' => $this->getParam('query'), 'pageno' => $pageno - 1), '_default').'"><strong>Previous</strong></a>';
		}
		
		//show the page slide
		for($i = 1 ; $i < $pagesPerSlide ; $i++)
		{
			if($i == $pageno)
			{
				$str .= $i;
			} else {
				$str .=	'  <a href="'.$this->uri(array('query' => $this->getParam('query'), 'pageno' => $i),'_default').' ">'.$i.'</a>';
			}
		}
		
		
		//the next button
		
		if(($pageno +1) == $pagesPerSlide){
			
			$str .='<span><strong>Next</strong></span></p>';
		} else {
			
			$str .='<a href="'.$this->uri(array('query' => $this->getParam('query'), 'pageno' => $pageno + 1), '_default').'"><strong>Next</strong></a></p>';
		}
		
		//other info
		$outof = ($pagesPerSlide == 1) ? 1 :($pagesPerSlide - 1);
		$str .='			<h4>Page '.$pageno.' of '. $outof  .'</h4>
						</div>
						
						<hr />
						
						<h1>Search Results</h1>
						<h5>'.count($arrResults).' Hits found</h5>
					<div id="resultslist-wrap"><ol>
						';
		
		//the array index
		if ($pageno == 1)
		{
			$indx = 0;
		} else {
			$indx = $pageno * $hitsPerPage;
		}
		
		
		//loop through the array
		$i = 0;
		while( $i < $hitsPerPage )
		{
			if ( is_object($arrResults[$indx + $i]))
			{
				$str .='
				
						<li>
							<dl>		
								<dt>'. ($indx + $i + 1) .' . <a href="'.$arrResults[$indx + $i]->url.'"> '.$arrResults[$indx + $i]->title.'</a></dt>
								<dd class="desc">Some description of the file must go here</dd>
								<dd class="filetype">HTML</dd>
								<dd class="date">'.$arrResults[$indx + $i]->date.'</dd>
							</dl>
						</li>';
			}
			$i++;
				
		}
			$str .='	</ol>
					</div>';
		
		return $str;
	}
	
}

?>